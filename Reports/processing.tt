  [% species = fields.taxonomic_designation %]
  [% species_format = {
    'K. pneumoniae' => '<em>Klebsiella pneumoniae</em>',
 	'K. quasipneumoniae subsp. quasipneumoniae' => 
 	   '<em>Klebsiella quasipneumoniae</em> subsp. <em>quasipneumoniae</em>',
	'K. variicola subsp. variicola' => '<em>Klebsiella variicola</em> subsp. <em>variicola</em>',
	'K. quasipneumoniae subsp. similipneumoniae' => 
	   '<em>Klebsiella quasipneumoniae</em> subsp. <em>similipneumoniae</em>',
	'K. variicola subsp. tropica' => '<em>Klebsiella variicola</em> subsp. <em>tropica</em>',
	'K. quasivariicola' => '<em>Klebsiella quasivariicola</em>',
	'K. africana' => '<em>Klebsiella africana</em>'
  } %]
  
  [% mlst_loci = ['gapA','infB','mdh','pgi','phoE','rpoB','tonB' ];
   
  parts = [];
   IF schemes.1;
     FOREACH v IN schemes.1;
       IF v.st;
         parts.push(v.st);
       END;
     END;
   END;
   st = parts.size ? parts.join(', ') : '';
   
   mlst_profile = '<table><tr><td rowspan="2" class="profile_heading">Profile:</td>';   
   FOREACH locus IN mlst_loci;
   	 mlst_profile = mlst_profile _ '<th>' _ locus _ '</th>';
   END;
   mlst_profile = mlst_profile _ '</tr><tr>';
   FOREACH locus IN mlst_loci;
     mlst_profile = mlst_profile _ '<td>';
	 FOREACH allele IN alleles.$locus;
	 	IF !loop.first;
	 		mlst_profile = mlst_profile _ ', ';
	 	END;
	 		mlst_profile = mlst_profile _ allele;
	 	END;
	 	mlst_profile = mlst_profile _ '</td>';
	 END;
	 mlst_profile = mlst_profile _ '</tr></table>';
  %]
  
  
  [% FOREACH result IN analysis.Kleborate.results.fields %]
  	[% FOREACH field IN result.keys %]
  		[% Kleb.$field = result.$field.replace('\*\?',' (homolog, fragment)')
  			.replace('\?',' (fragment)').replace('\*',' (homolog)')
  			.replace('\.v\d+','').replace('\^','') %]
  	[% END %]
  [% END %]
  
  
  [% 
 
  penicillin_list = [Kleb.Bla_acquired,Kleb.Bla_chr,Kleb.Bla_inhR_acquired]; 
  penicillin_output = penicillin_list.format_list({separator=>', ',prefix=>'bla', empty_term => 'None found'});
  
  penicillin_bla_inh_output = Kleb.Bla_inhR_acquired ? 'bla' _ Kleb.Bla_inhR_acquired : 'None found';
  cephalosporin_output = Kleb.Bla_ESBL_acquired ? 'bla' _ Kleb.Bla_ESBL_acquired : 'None found';
  cephalosporin_bla_inh_output = Kleb.Bla_ESBL_inhR_acquired ? 'bla' _ Kleb.Bla_ESBL_inhR_acquired : 'None found';
  
  prefixed_carbapenem = Kleb.Bla_Carb_acquired ? 'bla' _ Kleb.Bla_Carb_acquired : undef;
  carbapenems_list = [prefixed_carbapenem,Kleb.Omp_mutations];
  carbapenems_output = carbapenems_list.format_list({separator=>', ', empty_term => 'None found'});
  aminogylcocides_output = Kleb.AGly_acquired ? Kleb.AGly_acquired : 'None found';
  
  fluoroquinolones_list = [Kleb.Flq_acquired,Kleb.Flq_mutations]
  fluoroquinolones_output = fluoroquinolones_list.format_list({separator=>', ', empty_term => 'None found'});
  fosfomycin_output = Kleb.Fcyn_acquired ? Kleb.Fcyn_acquired : 'None found';
  phenicols_output = Kleb.Phe_acquired ? Kleb.Phe_acquired : 'None found';
  tigecycline_output = Kleb.Tgc_acquired ? Kleb.Tgc_acquired : 'None found';
  trimethoprim_output = Kleb.Tmt_acquired ? Kleb.Tmt_acquired : 'None found';
  sulfonamides_output = Kleb.Sul_acquired ? Kleb.Sul_acquired : 'None found';
  
  aerobactin_output = Kleb.AbST ? Kleb.AbST : 'None';
  salmochelin_output = Kleb.SmST ? Kleb.SmST : 'None';
  yersiniabactin_output = Kleb.YbST ? Kleb.YbST : 'None';
  colibactin_output = Kleb.CbST ? Kleb.CbST : 'None';
  hypermucoidy_list = [Kleb.RmpADC,Kleb.rmpA2];
  hypermucoidy_output = hypermucoidy_list.format_list({separator=>', ', empty_term => 'None'});
 
  phylogroup_output = lincodes.phylogroup.format_list({separator=>', ', empty_term => 'Not defined'})
  sublineage_output = lincodes.sublineage.format_list({separator=>', ', empty_term => 'Not defined'})
  clonal_group_output = lincodes.clonal_group.format_list({separator=>', ', empty_term => 'Not defined'})
  
  parts = [];
   IF schemes.18;
     FOREACH v IN schemes.18;
       IF v.scgst;
         parts.push(v.scgst);
       END;
     END;
   END;
   scgst = parts.size ? parts.join(', ') : '';
   %]
   
   [% 
   cluster_summary = '<p class="cluster_summary">There ';
   IF lincodes.clusters.5.simiar == 1;
       cluster_summary = cluster_summary _ 'is ';
   ELSE;
   	   cluster_summary = cluster_summary _ 'are ';
   END;
   cluster_summary = cluster_summary _ lincodes.clusters.5.similar _ ' related isolate';
   IF lincodes.clusters.5.simiar != 1;
     cluster_summary = cluster_summary _ 's';
   END;
   cluster_summary = cluster_summary _ ' identified with the same LINcode prefix '
   _ '<a href="https://bigsdb.pasteur.fr/cgi-bin/bigsdb/bigsdb.pl?db=pubmlst_klebsiella_isolates&page=query&designation_field1=lin_18&designation_operator1=starts%20with&designation_value1='
   _ lincodes.clusters.5.prefix _ '&submit=1">' _ lincodes.clusters.5.prefix _ '</a> '
   _ '(representing the 10 core genome MLST distance threshold) in the database.</p>';
   
   lincode_clusters = '';
   IF lincodes.clusters.5.similar;
	lincode_clusters = '<table class="isolates"><tr><th>id</th><th>isolate</th><th>country</th>'
	_ '<th>year</th><th>LINcode</th></tr>';
	  FOREACH isolate IN lincodes.clusters.5.isolates;
	    lincode_clusters = lincode_clusters _ '<tr';
	    IF fields.id == isolate.id;
	       lincode_clusters = lincode_clusters _ ' class="this_isolate"';
	    END;
	    lincode_clusters = lincode_clusters _ '><td>'
	    _ '<a href="https://bigsdb.pasteur.fr/cgi-bin/bigsdb/bigsdb.pl?db=pubmlst_klebsiella_isolates&page=info&id='
	      _ isolate.id _ '" target="_blank">' _ isolate.id _ '</a></td><td>' _ isolate.isolate _ '</td>'
	      _ '<td>' _ isolate.country _ '</td><td>' _ isolate.isolation_year _ '</td><td>'
	      _ isolate.lincode _ '</td></tr>';
      END;
	lincode_clusters = lincode_clusters _ '</table>';
   END;
  
  %]
  
  [% 
  clinical_summary = (species_format.$species || species) _ ' with intrinsic ampicillin resistance.';
  IF Kleb.Bla_ESBL_acquired || Kleb.Bla_Carb_acquired;
	MDR_list = [];
	IF Kleb.Bla_ESBL_acquired;
		MDR_list.push('ESBL');
	END;
	IF Kleb.Bla_Carb_acquired;
		MDR_list.push('CPE');
	END;
  	clinical_summary = clinical_summary _ ' Note multidrug resistance - ' 
  	_ MDR_list.format_list({separator=>' and '}) 
  	_ ' producing.';
	
  END;
  hypervirulent = ['CG23','CG65','CG868'];
  found = 0;
  FOREACH cg IN lincodes.clonal_group;
  	IF hypervirulent.grep(cg).size;
 		found = 1;
  		BREAK;
  	END;
  END;
  
  IF found;
    clinical_summary = clinical_summary _ ' This is a globally recognised hypervirulent clone.';
  END;	
	
  %]
  